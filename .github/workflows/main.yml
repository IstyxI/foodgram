name: Main Foodgram workflow

on:
  push:
    branches:
      - main

jobs:
  copy_files_to_server:
    name: Copy infra and docs
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2

    - name: Copy infra folder to remote server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: ./infra
        target: /home/${{ secrets.USER }}/foodgram/infra

    - name: Copy backend folder to remote server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: ./backend
        target: /home/${{ secrets.USER }}/foodgram/backend

  build_backend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - copy_files_to_server
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_back:latest

  flake8_tests:
    name: Test code with flake8
    runs-on: ubuntu-latest
    needs:
      - copy_files_to_server
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: pip install -r ./backend/requirements/requirements.lint.txt
      - name: Testing with flake8
        run: python -m flake8 backend/

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - copy_files_to_server
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_front:latest

  deploy:
    runs-on: ubuntu-22.04
    needs:
      - copy_files_to_server
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
    steps:
    - name: remote ssh commands to deploy
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          cd foodgram
          echo DEBUG=${{ secrets.DEBUG }} > .env
          echo SECRET_KEY=${{ secrets.SSH_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env

          sudo docker-compose stop
          sudo docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs sudo docker rm
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_front
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_back
          sudo docker-compose up -d
          sudo docker image prune -a
          rm -f .env

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!